# ScalaCheck 1.14.1 Release Notes

ScalaCheck is a powerful tool for property-based testing of Scala and Java
programs. It features automatic test case generation and simplification of
failing test cases. ScalaCheck started out as a straightforward Scala port of
the Haskell library QuickCheck, and has since wandered off on its own. Most
features of QuickCheck can be found in ScalaCheck and vice versa, though.

## What's new in ScalaCheck 1.14.1?

ScalaCheck 1.14.1 is a minor update from ScalaCheck 1.14.0, and it is
binary compatible. This means that if you
are using any other framework in combination with ScalaCheck, like `ScalaTest`
or `specs2` you can typically just bump the version of ScalaCheck in your
build definition or wait for those libraries to transitively do it for you in their next update.  You still need to make sure that the combination of frameworks you
are using was built and tested together with each other, otherwise you can run
into errors related to binary compatibility that are possibly very hard to
debug.

If you're using ScalaCheck as your only testing framework, you can safely update
your build definition to use the latest ScalaCheck release, although you might not see
compilation errors but there may be deprecation warnings due to expected changes in ScalaCheck's API.

For a detailed enumeration of what's new in ScalaCheck 1.14.1, see
https://github.com/typelevel/scalacheck/tree/1.14.1/CHANGELOG.markdown

For a detailed enumeration of what was new in ScalaCheck 1.14.0, see
https://github.com/typelevel/scalacheck/tree/1.14.0/CHANGELOG.markdown

## ScalaCheck highlights

  * Specifications are written in Scala, in a DSL-like fashion using
    combinators from the ScalaCheck library.

  * Properties are tested automatically, with test data generated by
    ScalaCheck. Data generation can be precisely controlled, and generation
    of custom data types is simple to define.

  * Failing test cases are simplified automatically, which makes pin-pointing
    error causes easier.

  * Support for stateful testing of command sequences, and simplification of
    failing command sequences.

  * The ScalaCheck library has no dependencies other than the Scala
    runtime.

  * ScalaCheck is well integrated with ScalaTest, sbt and specs2.


## ScalaCheck Resources

  * Official documentation, downloads etc: https://www.scalacheck.org

  * Twitter: @scalacheck

  * Source repository and bug reporting: https://github.com/typelevel/scalacheck

  * SBT dependency

    resolvers ++= Seq(
      "snapshots" at "https//oss.sonatype.org/content/repositories/snapshots",
      "releases"  at "https//oss.sonatype.org/content/repositories/releases"
    )

    libraryDependencies ++= Seq(
      "org.scalacheck" %% "scalacheck" % "1.14.1" % "test"
    )

  * Maven dependency

    Add this to your pom.xml (example for Scala 2.13):

    <repositories>
      <repository>
        <id>oss.sonatype.org</id>
        <name>releases</name>
        <url>https://oss.sonatype.org/content/repositories/releases</url>
      </repository>
      <repository>
        <id>oss.sonatype.org</id>
        <name>snapshots</name>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      </repository>
    </repositories>

    <dependency>
      <groupId>org.scalacheck</groupId>
      <artifactId>scalacheck_2.13</artifactId>
      <version>1.14.1</version>
    </dependency>
